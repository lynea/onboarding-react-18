import { Box } from "@chakra-ui/react";

import Head from "next/head";
import { Layout } from "../../components/Layout";
import React from "react";
import { useRouter } from "next/router";
import { NextPage } from "next";
import { getTeams } from "../../requests/teams";
import { useRecoilState } from "recoil";
import { todosState } from "../../state/todos";
import { Chapter } from "../../components/chapter";
import { Stepper } from "../../components/stepper";
import {
  ChaptersAttributes,
  GetTeamsResult,
  StepAttributes,
  Team,
  TeamAttributes,
} from "../../types/cms";

import * as stepperUtils from "../../utils/stepper";

type HomepageProps = {
  teams: TeamAttributes[];
};

const Home: NextPage<HomepageProps> = ({ teams }) => {
  const router = useRouter();
  const [localTodos, setLocalTodos] = useRecoilState(todosState);

  const { step, chapter, teamName } = router.query;

  const numStep = Number(step);

  const newTeams = [...teams];

  if (!teamName) {
    return <> oops no teamname was provided </>;
  }

  const currentTeam: TeamAttributes | undefined = stepperUtils.getCurrentTeam(
    newTeams,
    teamName
  );

  const chapters: ChaptersAttributes[] | undefined = stepperUtils.getAttributes(
    currentTeam?.chapters?.data ?? []
  );

  const currentChapterInfo = stepperUtils.findChapterByIndex(
    Number(chapter),
    chapters
  );

  currentChapterInfo?.steps?.data?.sort(
    (a, b) => a.attributes.prio - b.attributes.prio
  );

  if (!currentChapterInfo) {
    return <h1>that chapter does not exist for this team</h1>;
  }

  if (!step || !chapter) {
    return <> no step or chapter specified </>;
  }

  const isFirstStep = () => numStep === 1;
  const isLastStep = () => currentChapterInfo.steps.data.length === numStep;

  const isInLocalStore = (id: string) =>
    localTodos?.some((localTodo) => localTodo.id === id);

  const handleNextStep = () => {
    const steps = stepperUtils.getAttributes(
      currentChapterInfo?.steps?.data ?? []
    );
    const currentStep: StepAttributes | undefined = steps.at(numStep - 1);

    const todo = currentStep?.todos?.data?.at(0)?.attributes;

    if (todo && localTodos && !isInLocalStore(todo.identifier)) {
      setLocalTodos([
        ...localTodos,
        { completed: false, title: todo.title, id: todo.identifier },
      ]);
    }

    //if the todo was not completed set it to the store as uncompleted

    const incrementStep = () => (isLastStep() ? 1 : numStep + 1);

    //when the step is the last step
    const incrementChapter = () =>
      isLastStep() ? Number(chapter) + 1 : chapter;

    const link = `/onboarding/${teamName}?chapter=${incrementChapter()}&step=${incrementStep()}`;

    router.push(link, undefined, {
      shallow: true,
    });
  };
  const handlePreviousStep = () => {
    const decrementStep = () =>
      isFirstStep()
        ? stepperUtils.findChapterByIndex(Number(chapter) - 1, chapters)?.steps
            ?.data?.length
        : numStep - 1;

    const decrementChapter = () =>
      isFirstStep() ? Number(chapter) - 1 : chapter;

    router.push(
      `/onboarding/${teamName}?chapter=${decrementChapter()}&step=${decrementStep()}`,
      undefined,
      {
        shallow: true,
      }
    );
  };

  return (
    <div>
      <Head>
        <title>Mijn onboarding</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box as="main" display="flex" justifyContent="center">
        <Layout>
          <Chapter currentStep={numStep} {...currentChapterInfo} />
          <Stepper
            chapterCount={{
              current: Number(chapter),
              total: chapters?.length ?? 0,
            }}
            stepCount={{
              current: numStep,
              total: currentChapterInfo.steps.data.length,
            }}
            onNextClick={handleNextStep}
            onPreviousClick={handlePreviousStep}
          />
        </Layout>
      </Box>

      <footer></footer>
    </div>
  );
};

export async function getStaticProps() {
  const teams: GetTeamsResult = await getTeams();

  const getAttributes = (result: GetTeamsResult): TeamAttributes[] =>
    result.data.map((team: Team) => team.attributes);

  return {
    props: {
      teams: getAttributes(teams),
    },
  };
}

export async function getStaticPaths() {
  return {
    paths: [
      { params: { teamName: "sales" } },
      { params: { teamName: "products" } },
      { params: { teamName: "business" } },
    ],
    fallback: true, // false or 'blocking'
  };
}

export default Home;
