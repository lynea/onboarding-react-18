import { Box } from "@chakra-ui/react";

import Head from "next/head";
import { Layout } from "../../components/Layout";
import React from "react";
import { useRouter } from "next/router";
import { NextPage } from "next";
import { getTeams } from "../../requests/teams";
import { useRecoilState } from "recoil";
import { todosState } from "../../state/todos";
import { Chapter } from "../../components/chapter";
import { Stepper } from "../../components/stepper";
import {
  ChaptersAttributes,
  ChaptersData,
  GetTeamsResult,
  Team,
  TeamAttributes,
} from "../../types/cms";

type HomepageProps = {
  teams: TeamAttributes[];
};

const Home: NextPage<HomepageProps> = ({ teams }) => {
  const router = useRouter();
  const [localTodos, setLocalTodos] = useRecoilState(todosState);

  const { step, chapter, teamName } = router.query;

  const newTeams = [...teams];

  const currentTeam: TeamAttributes | undefined = newTeams?.find(
    (team: TeamAttributes) => team.name === teamName
  );
  const chapters: ChaptersAttributes[] | undefined =
    currentTeam?.chapters?.data?.map(
      (chapter: ChaptersData) => chapter.attributes
    );

  const findChapterByIndex = (indexToFind: number) =>
    chapters?.find(
      (responseChapter: ChaptersAttributes) =>
        responseChapter.index === indexToFind
    );

  const currentChapterInfo = findChapterByIndex(Number(chapter));

  currentChapterInfo?.steps?.data?.sort(
    (a, b) => a.attributes.prio - b.attributes.prio
  );

  if (!currentChapterInfo) {
    return <h1>that chapter does not exist for this team</h1>;
  }

  if (!step || !chapter) {
    return <> no step or chapter specified </>;
  }
  //@ts-ignore
  // const currentChapter = chapters[chapter];
  const isFirstStep = () => Number(step) === 1;

  const handleNextStep = () => {
    //if the chapter has no more steps increment chapter
    const todo = currentChapterInfo?.steps?.data?.map((s: any) => s.attributes)[
      Number(step) - 1
    ].todos?.data[0]?.attributes;

    console.log("todo", todo);
    console.log("local", localTodos);

    if (
      todo &&
      localTodos &&
      !localTodos?.some((localTodo) => localTodo.id === todo.identifier)
    ) {
      setLocalTodos([
        ...localTodos,
        { completed: false, title: todo.title, id: todo.identifier },
      ]);
    }

    //if the todo was not completed set it to the store as uncompleted

    const isLastStep = () =>
      currentChapterInfo.steps.data.length === Number(step);

    const incrementStep = () => (isLastStep() ? 1 : Number(step) + 1);

    //when the step is the last step
    const incrementChapter = () =>
      isLastStep() ? Number(chapter) + 1 : chapter;

    const link = `/onboarding/${teamName}?chapter=${incrementChapter()}&step=${incrementStep()}`;

    router.push(link, undefined, {
      shallow: true,
    });
  };
  const handlePreviousStep = () => {
    const decrementStep = () =>
      isFirstStep()
        ? findChapterByIndex(Number(chapter) - 1)?.steps?.data?.length
        : Number(step) - 1;
    const decrementChapter = () =>
      isFirstStep() ? Number(chapter) - 1 : chapter;

    router.push(
      `/onboarding/${teamName}?chapter=${decrementChapter()}&step=${decrementStep()}`,
      undefined,
      {
        shallow: true,
      }
    );
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box as="main" display="flex" justifyContent="center">
        <Layout>
          <Chapter currentStep={Number(step)} {...currentChapterInfo} />
          <Stepper
            chapterCount={{
              current: Number(chapter),
              total: chapters?.length ?? 0,
            }}
            stepCount={{
              current: Number(step),
              total: currentChapterInfo.steps.data.length,
            }}
            onNextClick={handleNextStep}
            onPreviousClick={handlePreviousStep}
          />
        </Layout>
      </Box>

      <footer></footer>
    </div>
  );
};

export async function getStaticProps() {
  const teams: GetTeamsResult = await getTeams();

  const getAttributes = (result: GetTeamsResult): TeamAttributes[] =>
    result.data.map((team: Team) => team.attributes);

  return {
    props: {
      teams: getAttributes(teams),
    },
  };
}

export async function getStaticPaths() {
  return {
    paths: [
      { params: { teamName: "sales" } },
      { params: { teamName: "products" } },
      { params: { teamName: "business" } },
    ],
    fallback: true, // false or 'blocking'
  };
}

export default Home;
